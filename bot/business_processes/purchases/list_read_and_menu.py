from typing import Dict, Any, Tuple

from aiogram import types, Router, F
from aiogram.types import InlineKeyboardButton, KeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from bot.business_processes.lists.utils.lits_details_api import get_lists_detail_api
from bot.constants import django_address
from bot.create_bot import MyBot
from bot.api.django_auth import django_auth, update_last_request_time
from bot.emoji import emoji
from bot.translate import transl


class ListDataProcessing:

    @staticmethod
    async def data_to_text_and_keyboard(list_data: list) -> Tuple[str, InlineKeyboardMarkup]:
        message_text = ""
        number_count = 1
        builder = InlineKeyboardBuilder()
        for category_dict in list_data:
            category_name = category_dict["name"]
            purchases_list = category_dict["purchases"]
            if purchases_list:
                message_text += f"____{category_name}\n"
                for purchase_dict in purchases_list:
                    message_text += f"{number_count}. {purchase_dict['name']}"
                    if purchase_dict['description']:
                        message_text += f" ({purchase_dict['description']})\n"
                    else:
                        message_text += "\n"
                    builder.add(InlineKeyboardButton(text=f"{number_count}",
                                                     callback_data=f"del_pur {purchase_dict['id']}"))
                    number_count += 1
        if message_text == "":
            message_text = "–°–ø–∏—Å–æ–∫ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≥—Ä—É–ø–ø—ã) –ø–æ–∫–∞ –ø—É—Å—Ç(—ã)."
        keyboard = builder.as_markup(resize_keyboard=True)
        return message_text, keyboard


class ListReadAPI:

    @staticmethod
    @update_last_request_time(django_auth)
    async def get_hole_list(telegram_user_id: int) -> Tuple[str, InlineKeyboardMarkup]:
        """Read one single list with categories and their purchases."""
        url = f"{django_address}/lists/list_or_group/"
        data = {"telegram_user_id": telegram_user_id}
        response = django_auth.session.get(url=url, data=data)
        message_text, keyboard = await ListDataProcessing.data_to_text_and_keyboard(response.json())
        return message_text, keyboard


class ListKeyboards:

    @staticmethod
    async def list_keyboard_builder():
        builder = ReplyKeyboardBuilder()
        builder.add(
            KeyboardButton(text="üîÑ"),
            KeyboardButton(text="‚úèÔ∏è"),
            KeyboardButton(text="‚û°Ô∏èüìÅ"),
            KeyboardButton(text="üìÅ‚û°Ô∏è"),
            KeyboardButton(text="üóÉÔ∏èGroups"),  # Ô∏è–ì—Ä—É–ø–ø—ã
            KeyboardButton(text="üóÇÔ∏èCategories"),  # Ô∏è–ö–∞—Ç–µ–≥–æ—Ä–∏–∏
            KeyboardButton(text="üì¶Lists"),  # –°–ø–∏—Å–∫–∏
            KeyboardButton(text="üõ†Ô∏è"),  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Conf

        )
        builder.adjust(4)
        return builder.as_markup(resize_keyboard=True)


list_read_router = Router()


class ListRead:

    @staticmethod
    async def get_current_lists_purchases_list(telegram_user_id: int):
        """
                –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ get_hole_list —Ç–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π:
            '–æ —Å–ø–∏—Å–∫–µ' –∏ –≤—Ç–æ—Ä–æ–µ —Å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Å–ø–∏—Å–∫–∞
        """
        # –ó–∞–ø—Ä–æ—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Å–ø–∏—Å–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:
        list_name = await get_lists_detail_api(telegram_user_id)
        list_message_text = f"–°–ø–∏—Å–æ–∫ \"{list_name}\":"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "–°–ø–∏—Å–æ–∫ {list_name}:" —Å –≤—ã–≤–æ–¥–æ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:
        await MyBot.bot.send_message(chat_id=telegram_user_id,
                                     text=list_message_text,
                                     reply_markup=await ListKeyboards.list_keyboard_builder())

        # –ó–∞–ø—Ä–æ—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:
        message_text, keyboard = await ListReadAPI.get_hole_list(telegram_user_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Å–ø–∏—Å–∫–∞ –∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:
        await MyBot.bot.send_message(chat_id=telegram_user_id,
                                     text=message_text,
                                     reply_markup=keyboard)

    buttons_short = transl["ru"]['lists_menu']['buttons_short']

    @staticmethod
    @list_read_router.message((F.text == emoji['reload']) |
                              (F.text == emoji['back'] + emoji['list'] + buttons_short['back']) |
                              (F.text == transl["ru"]['lists_menu']['buttons']['back'] + emoji['list']) |
                              (F.text == emoji['back'] + emoji['list'])
                              )  # TODO: –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–∞ —Ü–∏–∫–ª, —á—Ç–æ–±—ã –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ 'ru'
    async def list_of_purchases_handler(message: types.Message):
        """ Handler-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π """
        await ListRead.get_current_lists_purchases_list(message.from_user.id)
